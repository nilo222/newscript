# Python code @beducode
 

import base64, codecs
magic = 'import requests
import json
import time
import sys
import random
import os
import argparse
import colorama
import string
import traceback
import urllib
import pathlib
from colorama import Fore, Back, Style
from random import randint
from datetime import datetime
import pyshorteners
from urllib.request import Request, urlopen
from bs4 import BeautifulSoup
from fake_useragent import UserAgent
from os import system, name
from inputimeout import inputimeout, TimeoutOccurred
from faunadb import query as q
from faunadb.objects import Ref
from faunadb.client import FaunaClient
colorama.init(autoreset=True)

# SET BETSET
parser = argparse.ArgumentParser(
    description='999 Dice Bot | This Is Gambling Bot Plase Take Own Your Risk')
parser.add_argument(
    '-c', '--betset',
    default=0,
    help='Enter Your Betset Number (default: 0)'
)
my_namespace = parser.parse_args()

with open('settings.json', 'r') as myfile:
    data = myfile.read()
# PARSE FILE
obj = json.loads(data)


# CONFIG WARNA
res = Style.RESET_ALL
putih = Style.NORMAL+Fore.WHITE
putih2 = Style.BRIGHT+Fore.WHITE
hitam = Style.BRIGHT+Fore.BLACK
hitam2 = Style.BRIGHT+Fore.BLACK
ungu = Style.NORMAL+Fore.MAGENTA
hijau = Style.NORMAL+Fore.GREEN
hijau2 = Style.BRIGHT+Fore.GREEN
merah = Style.NORMAL+Fore.RED
merah2 = Style.BRIGHT+Fore.RED
biru = Style.NORMAL+Fore.BLUE
biru2 = Style.BRIGHT+Fore.BLUE
biru3 = Style.BRIGHT+Fore.LIGHTCYAN_EX
profitcolor = Style.BRIGHT+Back.GREEN+Fore.WHITE
losecolor = Style.BRIGHT+Back.RED+Fore.WHITE
rccolor = Style.BRIGHT+Back.WHITE+Fore.BLACK
rcfontcolor = Style.NORMAL+Fore.BLACK
kuning = Style.NORMAL+Fore.YELLOW
kuning2 = Style.BRIGHT+Fore.YELLOW

c = requests.session()
ua = UserAgent()
proxies = []
proxystatus = False
freeversion = True
linkcode = ""
client = FaunaClient(secret="fnAEAcAKliACCJH00BfVSH2dPZ0EIMPWHlMCTbEX")


def setmsgbox():

    try:
        msg = client.query(
            q.get(q.match(q.index("param_by_id"), "messagebox")))
        msgbox = msg["data"]["message"]
    except:
        msgbox = "-"

    return msgbox


def banner():
    # BANNER
    banner = "\n\n"
    banner = banner + merah2 + "·▄▄▄▄  ▪   ▄▄· ▄▄▄ .▄▄▄▄·      ▄▄▄▄▄\n"
    banner = banner + "██▪ ██ ██ ▐█ ▌▪▀▄.▀·▐█ ▀█▪▪    •██  \n"
    banner = banner + "▐█· ▐█▌▐█·██ ▄▄▐▀▀▪▄▐█▀▀█▄ ▄█▀▄ ▐█." + putih2 + "▪\n"
    banner = banner + "██. ██ ▐█▌▐███▌▐█▄▄▌██▄▪▐█▐█▌.▐▌▐█▌·\n"
    banner = banner + "▀▀▀▀▀• ▀▀▀·▀▀▀  ▀▀▀ ·▀▀▀▀  ▀█▄▀▪▀▀▀\n"
    banner = banner + "\n"
    banner = banner + putih2 + "Author      : "
    banner = banner + merah2 + "github@beducode\n"
    banner = banner + putih2 + "Advisor     : "
    banner = banner + merah2 + "@riosuyanto\n"
    banner = banner + putih2 + "Contact     : "
    banner = banner + merah2 + "@beduplay / @riosuyanto\n"
    banner = banner + putih2 + "Version     : "
    banner = banner + merah2 + "v.2.0\n" + res
    print(banner)


url = "https://www.999doge.com/api/web.aspx"
uadata = {
    "Origin": "file://",
    "user-agent": ua.random,
    "Content-type": "application/x-www-form-urlencoded",
    "Accept": "*/*",
    "Accept-Language": "id-ID,id;q=0.9,en-US;q=0.8,en;q=0.7",
    "X-Requested-With": "com.reland.relandicebot"
}

# CLEAN PAGE


def clear():

    # for windows
    if name == 'nt':
        _ = system('cls')

    # for mac and linux(here, os.name is 'posix')
    else:
        _ = system('clear')

# CONVERT BET & AMOUNT


def konvert(persen, taruhan):
    global high
    global low
    c = str(999999 * float(persen) / 100)
    if taruhan == "Hi" or taruhan == "hi" or taruhan == "HI":
        n = str(c.split(".")[1])
        pangkat = 6 - len(n)
        low = int(int(n) * (10 ** pangkat))
        high = 999999
    if taruhan == "Lo" or taruhan == "LOW" or taruhan == "low" or taruhan == "Low" or taruhan == "LO":
        low = 0
        high = int(c.split(".")[0])

# DECIMAL 8 DIGIT


def rev(num):
    if (len(num) < 8):
        panjang_nol = int(8 - len(num))
        num = ((panjang_nol*"0")+str(num))
        result = ("0."+num)
    if (len(num) == 8):
        panjang_nol = int(8 - len(num))
        num = ((panjang_nol*"0")+str(num))
        result = ("0."+num)
    else:
        len_num = len(num)
        end = num[-8:]
        first = num[:len_num-8]
        result = (first+"."+end)
    return (result)

# API INDODAX FOR GET LAST PRICE


def indodax(coin):

    try:
        if coin == "DOGE" or coin == "doge" or coin == "Doge":
            pair = "doge_idr"
        elif coin == "LTC" or coin == "ltc" or coin == "Ltc":
            pair = "ltc_idr"
        else:
            pair = "eth_idr"

        url = 'https://indodax.com/api/' + str(pair) + '/ticker'

        indx = requests.get(url)
        jsindx = json.loads(indx.text)
        pricepair = int(jsindx["ticker"]["last"])
    except:
        if coin == "DOGE" or coin == "doge" or coin == "Doge":
            coinpair = "doge"
        elif coin == "LTC" or coin == "ltc" or coin == "Ltc":
            coinpair = "ltc"
        else:
            coinpair = "eth"

        url = "https://beducode-price.herokuapp.com/price/" + str(coinpair)

        price = c.get(url)
        data = json.loads(price.text)
        pricepair = data["last"]

    return pricepair

# FORMAT VALUE TO IDR


def rupiah_format(angka):
    return 'Rp ' + '{:0,.2f}'.format(angka)

# GENERATE STRING


def stringgen(N):
    resp = ''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
    return str(resp)


# FIND PROXY
def findproxy():
    # Retrieve latest proxies
    proxies_req = Request('https://www.sslproxies.org/')
    proxies_req.add_header('User-Agent', ua.random)
    proxies_doc = urlopen(proxies_req).read().decode('utf8')

    soup = BeautifulSoup(proxies_doc, 'html.parser')
    proxies_table = soup.find(id='proxylisttable')

    # Save proxies in the array
    for row in proxies_table.tbody.find_all('tr'):
        proxies.append({
            'ip':   row.find_all('td')[0].string,
            'port': row.find_all('td')[1].string
        })

    # Choose a random proxy
    proxy_index = random_proxy()
    proxy = proxies[proxy_index]

    for n in range(1, 100):
        req = Request('http://www.999doge.com')
        req.set_proxy(proxy['ip'] + ':' + proxy['port'], 'http')

        # Every 10 requests, generate a new proxy
        if n % 10 == 0:
            proxy_index = random_proxy()
            proxy = proxies[proxy_index]

        # Make the call
        try:
            print('  Mohon tunggu, sedang mencari proxy sebelum running... ' + Style.BRIGHT+Back.GREEN +
                  Fore.WHITE + ' CHECK SERVER # ' + str(proxy_index) + ' ' + Style.RESET_ALL + ' ', end="\r" + res)
            urlopen(req, timeout=5).read().decode('utf8')
            return proxies[proxy_index]
        except:  # If error, delete this proxy and find another one
            del proxies[proxy_index]
            proxy_index = random_proxy()
            proxy = proxies[proxy_index]


def cekproxymanual(ip, port):
    req = Request('http://www.999doge.com')
    req.set_proxy(ip + ':' + port, 'http')
    try:
        urlopen(req, timeout=5).read().decode('utf8')
        status = True
    except:
        status = False

    return status


def random_proxy():
    return random.randint(0, len(proxies) - 1)


def setProxy():
    if obj["Proxy Manual"]["Toggle"] == "ON" or obj["Proxy Manual"]["Toggle"] == "on" or obj["Proxy Manual"]["Toggle"] == "On":
        ip = str(obj["Proxy Manual"]["Ip"])
        port = str(obj["Proxy Manual"]["Port"])
        proxystatus = cekproxymanual(ip, port)

        if proxystatus is True:
            proxies = dict()

            proxies["ip"] = ip
            proxies["port"] = port
        else:
            proxystatus = False

    else:
        if obj["Account"]["Auto Proxy"] == "ON" or obj["Account"]["Auto Proxy"] == "on" or obj["Account"]["Auto Proxy"] == "On":

            # CLEAR BEFORE RUNNING
            clear()
            banner()

            proxystatus = True
            proxies = findproxy()
        else:
            proxystatus = False


def checkcurr(curr):
    if curr == "DOGE" or curr == "doge" or curr == "Doge":
        currbalance = js[currency]["Balance"]
    elif curr == "LTC" or curr == "ltc" or curr == "Ltc":
        currbalance = js[currency]["Balance"]
    else:
        currbalance = js[currency]["Balance"]

    return currbalance


def checklogin(status):
    if status is True:
        clear()
        banner()

        print(merah2 + "Periksa Kembali Username Atau Password Anda Pada File settings.json" + res)
        sys.exit()
    else:
        pass


# FOR PUBLIC VERSION
def checkccount(balacc, version, curr):

    if curr == "DOGE" or curr == "doge" or curr == "Doge":
        limitbal = 100
    elif curr == "LTC" or curr == "ltc" or curr == "Ltc":
        limitbal = 0.0001
    else:
        limitbal = 0.00001

    if version is True:
        if balacc > int(float(limitbal)*(10 ** 8)):
            clear()
            banner()

            print(merah2 + "Anda Hanya Dapat Menggunakan Balance Maksimal " + str(limitbal) + " " +
                  str(curr).upper() + " Pada Versi Ini, Silahkan Hubungi Contact Untuk Informasi Lebih Lanjut" + res)
            sys.exit()
        else:
            pass
    else:
        pass


# CREATE CODE FOR SHORTLINK SERVER
def createcode(code):

    api = "https://beducode-pass.herokuapp.com/create/" + code

    ccode = c.get(api)
    data = json.loads(ccode.text)
    cid = data["code_id"]

    return cid

# GET LINK CODE FOR SHORTLINK SERVER


def getlinkcode(codeid):

    linkcode = "https://beducode-pass.herokuapp.com/" + codeid

    return linkcode

# GET SHORTLINK FROM SERVER


def getshortlink(link):

    api = "https://beducode-link.herokuapp.com/generate/" + link

    rshort = c.get(api)
    data = json.loads(rshort.text)
    sl = data["url"]

    return sl

# GENERATE SHORTLINK


def createLink(code):
    codeid = createcode(code)
    linkpasscode = getlinkcode(codeid)
    linkurl = getshortlink(linkpasscode)

    return linkurl

# AUTH FREE VERSION


def authfreever():
    global linkcode
    global passcode

    clear()
    banner()

    if linkcode == "":
        passcode = stringgen(20)
        linkcode = createLink(passcode)
    else:
        pass

    print("Link : ", linkcode)
    # MASUKAN PASS DARI SHORTLINK
    try:
        inputpass = biru2 + '\r' + putih2 + '>> ' + res + kuning2 + \
            'Silahkan Masukan Password Dari Link Di Atas : ' + res
        passinput = inputimeout(prompt=inputpass, timeout=600)
        if passinput == "":
            authfreever()
        else:
            if passinput != passcode:
                clear()
                banner()
                print("Password Yang Anda Masukan Salah, Silahkan Coba Kembali")
                time.sleep(2)
                authfreever()
            else:
                linkcode = ""
                passcode = ""
                pass
    except TimeoutOccurred:
        authfreever()

# CHECK MEMBER STATUS


def checkpremstatus(passcode):
    try:
        member = client.query(
            q.get(q.match(q.index("member_by_code"), passcode)))
        status = int(member["data"]["member_status"])
    except:
        status = 0

    return status

# CREATE FILE PASSCODE


def createfilepass(passc):
    f = open("passcode.txt", "w+")
    f.write(passc)
    f.close()

# READ FILE PASS IF EXISTS


def readpass():
    f = open(file, "r")
    if f.mode == 'r':
        passc = f.read()

    return passc


# AUTH PREMIUM VERSION
def authpremver():
    clear()
    banner()

    # MASUKAN PASS REGISTER
    try:
        inputpass = biru2 + '\r' + putih2 + '>> ' + res + \
            kuning2 + 'Silahkan Masukan Passcode Anda: ' + res
        passinput = inputimeout(prompt=inputpass, timeout=600)
        if passinput == "":
            authpremver()
        else:
            passcode = checkpremstatus(passinput)
            if int(passcode) != 1:
                clear()
                banner()
                print("Passcode Yang Anda Masukan Salah, Silahkan Coba Kembali")
                time.sleep(2)
                authpremver()
            else:
                createfilepass(passinput)

    except TimeoutOccurred:
        authpremver()


# VERSION VALIDATE
if freeversion is True:
    # authfreever()
    pass
else:
    file = pathlib.Path("passcode.txt")
    if file.exists():
        passcode = readpass()
        check = checkpremstatus(passcode)
        if int(check) != 1:
            authpremver()
        else:
            pass
    else:
        authpremver()

# DEK MODE RUN AKTIF


def checkmoderun():
    moderun = 0
    urut = int(my_namespace.betset)
    if obj["Betset"][urut]["Mode1"]["Toggle"] == "ON" or obj["Betset"][urut]["Mode1"]["Toggle"] == "on" or obj["Betset"][urut]["Mode1"]["Toggle"] == "On":
        moderun += 1
    else:
        pass
    if obj["Betset"][urut]["Mode2"]["Toggle"] == "ON" or obj["Betset"][urut]["Mode2"]["Toggle"] == "on" or obj["Betset"][urut]["Mode2"]["Toggle"] == "On":
        moderun += 1
    else:
        pass
    if obj["Betset"][urut]["Mode3"]["Toggle"] == "ON" or obj["Betset"][urut]["Mode3"]["Toggle"] == "on" or obj["Betset"][urut]["Mode3"]["Toggle"] == "On":
        moderun += 1
    else:
        pass
    if obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "ON" or obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "on" or obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "On":
        moderun += 1
    else:
        pass

    return moderun

# VALIDASI MODE RUN


def validatemoderun(moderun):
    if moderun > 1:
        clear()
        banner()

        print(biru2 + '\r' + putih2 + '>> ' + res + merah2 + 'Anda Mengaktifkan Lebih Dari 1 Mode!!' +
              res + putih2 + ', Silahkan Cek Kembali File settings.json Anda' + res)
        time.sleep(2)
        sys.exit()
    else:
        pass


def auth2fa():
    # CLEAR BEFORE
    clear()
    banner()

    try:
        inputotp = biru2 + '\r' + putih2 + '>> ' + res + kuning2 + \
            'Silahkan masukan kode google authenticator anda : ' + res
        otpinput = inputimeout(prompt=inputotp, timeout=600)
        if otpinput == "":
            auth2fa()
        else:
            return inputotp

    except TimeoutOccurred:
        auth2fa()


mdcount = checkmoderun()
validatemoderun(mdcount)

username = obj["Account"]["Username"]
password = obj["Account"]["Password"]
# SET UP API AKSES FROM 999DOGE.COM
if obj["Account"]["API Access"] == "OFF" or obj["Account"]["API Access"] == "off" or obj["Account"]["API Access"] == "Off":
    apiAkses = "cd6f9843b05f4042ad1d4060d290b2fd"
else:
    apiAkses = obj["Account"]["API Access"]

if obj["Account"]["2FA"] == "ON" or obj["Account"]["2FA"] == "on" or obj["Account"]["2FA"] == "On":
    otpstatus = True
    otp = auth2fa()
else:
    otpstatus = False


def stopbet(profit, bl, mb, ls):
    clear()
    banner'
love = ''
god = 'v(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + losecolor + putih2 + str(rolebet) + res + " " + hijau2+"+"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    # BET SETTING
                    if no_win == winGet1 and go is True:
                        if tmplose != 0:
                            amount = int(tmplose) * Mt1
                        else:
                            amount = int(baseBet) * Mt1

                    if no_win > winGet1 and no_win <= winGet2 and go is True:
                        amount = int(amount) * Mt2

                    if no_win > winGet2 and go is True:
                        tmplose = 0
                        go = False
                        amount = int(payin)

                else:
                    no_win = 0
                    no_lose += 1
                    go = False

                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:

                        if stopmaxbet is True:
                            if stopbetamount != 0 and amount > stopbetamount:
                                stopbet(prof, bal, maxbet, total_lose)
                            else:
                                pass
                        else:
                            pass

                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + profitcolor + putih2 + str(rolebet) + res +
                                  " " + merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + profitcolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                    else:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + losecolor + putih2 + str(rolebet) + res + " " +
                                  merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(losecolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    if no_lose == 1:
                        if amount > payin:
                            tmplose = int(amount)
                            amount = int(payin)
                    else:
                        amount = int(payin)
            elif obj["Betset"][urut]["Mode2"]["Toggle"] == "ON" or obj["Betset"][urut]["Mode2"]["Toggle"] == "on" or obj["Betset"][urut]["Mode2"]["Toggle"] == "On":
                # MODE-2 PREROLL COUNT
                if jsn["PayOut"] != 0:
                    no_win += 1
                    no_lose = 0
                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:
                        if amount > maxbet:
                            maxbet = amount
                        else:
                            pass

                        if stopmaxbet is True:
                            if stopbetamount != 0 and amount > stopbetamount:
                                stopbet(prof, bal, maxbet, total_lose)
                            else:
                                pass
                        else:
                            pass

                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + profitcolor + putih2 + str(rolebet) + res + " " +
                                  hijau2+"+"+str(rev(str(amount))) + res + biru3 + " Balance" + res + " : " + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + profitcolor + putih2 + str(rolebet) + res + " " + hijau2+"+"+str(
                                rev(str(amount))) + res + biru3 + " Balance" + res + " : " + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                    else:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + losecolor + putih2 + str(rolebet) + res + " " +
                                  hijau2+"+"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(losecolor + putih2 + str(rolebet) + res + " " + hijau2+"+"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    amount = int(payin)
                    preroll = int(obj["Betset"][urut]["Mode2"]["Preroll"])
                    prerollStatus = True

                else:
                    no_win = 0
                    no_lose += 1
                    preroll -= 1
                    i = 0
                    burst = True
                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:

                        if stopmaxbet is True:
                            if stopbetamount != 0 and amount > stopbetamount:
                                stopbet(prof, bal, maxbet, total_lose)
                            else:
                                pass
                        else:
                            pass

                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + profitcolor + putih2 + str(rolebet) + res +
                                  " " + merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + profitcolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                    else:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + losecolor + putih2 + str(rolebet) + res + " " +
                                  merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + losecolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    if preroll == 0:
                        amount = int(baseBet)
                        prerollStatus = False
                    elif preroll < 0:
                        amount = int(amount) * Mtpreroll
                    else:
                        amount = int(payin)

            elif obj["Betset"][urut]["Mode3"]["Toggle"] == "ON" or obj["Betset"][urut]["Mode3"]["Toggle"] == "on" or obj["Betset"][urut]["Mode3"]["Toggle"] == "On":
                # MODE-3 PREROLL COUNT WITH MAX LOSE STRIKE LIMIT
                if jsn["PayOut"] != 0:
                    no_win += 1
                    no_lose = 0
                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:

                        if stopmaxbet is True:
                            if stopbetamount != 0 and amount > stopbetamount:
                                stopbet(prof, bal, maxbet, total_lose)
                            else:
                                pass
                        else:
                            pass

                        if amount > maxbet:
                            maxbet = amount
                        else:
                            pass

                        if total_lose >= maxlslimit:
                            stoplimitls(prof, bal, maxbet, total_lose)
                        else:
                            pass

                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + profitcolor + putih2 + str(rolebet) + res + " " +
                                  hijau2+"+"+str(rev(str(amount))) + res + biru3 + " Balance" + res + " : " + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + profitcolor + putih2 + str(rolebet) + res + " " + hijau2+"+"+str(
                                rev(str(amount))) + res + biru3 + " Balance" + res + " : " + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                    else:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + losecolor + putih2 + str(rolebet) + res + " " +
                                  hijau2+"+"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(losecolor + putih2 + str(rolebet) + res + " " + hijau2+"+"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    amount = int(payin)
                    preroll = int(obj["Betset"][urut]["Mode3"]["Preroll"])
                    prerollStatus = True

                else:
                    no_win = 0
                    no_lose += 1
                    preroll -= 1
                    i = 0
                    burst = True
                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + profitcolor + putih2 + str(rolebet) + res +
                                  " " + merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + profitcolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                    else:
                        if rdchange is True:
                            print(rccolor + rcfontcolor + chancerand + res + losecolor + putih2 + str(rolebet) + res + " " +
                                  merah2+"-"+str(rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))
                        else:
                            print(res + losecolor + putih2 + str(rolebet) + res + " " + merah2+"-"+str(
                                rev(str(amount))) + res + biru3 + " Balance : " + res + str(rev(str(bal))) + res + hijau2 + " Profit" + res + " : " + str(rev(str(profit))) + res + kuning + " Total" + res + " : " + str(wd))

                    if preroll == 0:
                        amount = int(baseBet)
                        prerollStatus = False
                    elif preroll < 0:
                        amount = int(amount) * Mtpreroll
                    else:
                        amount = int(payin)

            elif obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "ON" or obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "on" or obj["Betset"][urut]["Fibonacci1"]["Toggle"] == "On":
                fibo = True
                # MODE FIBONACCI #1
                if jsn["PayOut"] != 0:
                    no_win += 1
                    no_lose = 0
                    fbcount = 1
                    fbtmp = 1
                    bal = int(jsn["StartingBalance"]) + int(jum)
                    profit = bal-currbalance
                    lastprice = marketidx
                    wdbalance = float(int(bal))/(10 ** 8)
                    wd = rupiah_format(lastprice * wdbalance)

                    if prof > 0:
                        if amount > maxbet:
                            maxbet = amount
                        else:
                            pass

                        if stopmaxbet is True:
                            if stopbetamount != 0 and amount > stopbetamount:
                                stopbet(prof, ba'
destiny = ''
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))